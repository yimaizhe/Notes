一，主页面A调用iframe页面B，如何调用B的方法
	
	var funcImpl=parent.window.frames[0].frameElement.contentWindow;//获取iframe的对象
	funcImpl.initparams=param;//为子页面传参数，initparams是iframe页面的全局变量；param是实际参数
	funcImpl.eval(funcName);//调用子页面方法funcName
  　
	如果需要获得funcName方法的返回值，须：
	var rs = funcImpl.eval(funcName).call();
	不调用call（）的话，返回的是该函数，函数未执行

  在加载完框架后再加载数据：
	var param = JSON.parse(JSON.stringify(funcInfo["data"]));
	setTimeout(function(){
		//等子页面的文档初始化完成后执行数据初始化
		$localFuncInvoke(iframeId,funcInfo["init_funcName"],param);
	},500);	

   ＰＳ：
　　1：document.getElementById("ii").contentWindow 得到iframe对象后，就可以通过contentWindow得到iframe包含页面
	的window对象，然后就可以正常访问页面元素了；

　　2：$("#ii")[0].contentWindow  如果用jquery选择器获得iframe，需要加一个【0】；

　　3：$("#ii")[0].contentWindow.$("#dd").val() 可以在得到iframe的window对象后接着使用jquery选择器进行页面操作;

　　4：$("#ii")[0].contentWindow.hellobaby="dsafdsafsdafsdafsdafsdafsadfsadfsdafsadfdsaffdsaaaaaaaaaaaaa"; 
	可以通过这种方式向iframe页面传递参数，在iframe页面window.hellobaby就可以获取到值，hellobaby是自定义的变量；

　　5：在iframe页面通过parent可以获得主页面的window，接着就可以正常访问父亲页面的元素了；

　　6：parent.$("#ii")[0].contentWindow.ff; 同级iframe页面之间调用，需要先得到父亲的window，然后调用同级的
	iframe得到window进行操作；


二、table动态添加、删除特定行

//添加行
function show(){
  var row = document.createElement("TR");
  var t1 = document.createElement("TD");
  t1.setAttribute("style","HEIGHT:50px");
  t1.setAttribute("colspan","2");

  t1.appendChild(divCon);
  row.appendChild(t1);
 
  //获取当前行  
  var currentRow=$('table:first tbody tr:eq(0)');  
  //当前行之后插入一行  
  currentRow.after(row);  
}

//删除行
function hide(){

  var divCon=document.getElementById("divcon0");     //待隐藏行内部容器id
  var tb =document.getElementById("table20");        //待隐藏table的id
  var tbody = tb.getElementsByTagName("TBODY")[0];
  var divc=document.getElementById("divcon0").parentNode.parentNode;
  tbody.removeChild(divc);
 
  return divCon;
}

三， jquery中attr和prop的区别

在高版本的jquery引入prop方法后，什么时候该用prop？什么时候用attr？它们两个之间有什么区别？这些问题就出现了。

关于它们两个的区别，网上的答案很多。这里谈谈我的心得，我的心得很简单：

    对于HTML元素本身就带有的固有属性，在处理时，使用prop方法。
    对于HTML元素我们自己自定义的DOM属性，在处理时，使用attr方法。
eg:
	<input id="chk1" type="checkbox" />是否可见
	<input id="chk2" type="checkbox" checked="checked" />是否可见

像checkbox，radio和select这样的元素，选中属性对应“checked”和“selected”，这些也属于固有属性，
 因此需要使用prop方法去操作才能获得正确的结果。

	$("#chk1").prop("checked") == false
	$("#chk2").prop("checked") == true

如果上面使用attr方法，则会出现：

	$("#chk1").attr("checked") == undefined
	$("#chk2").attr("checked") == "checked"

