1.一个正则表达式也称为一个模式，与一个模式匹配的字符串称为匹配模式字符串（或模式匹配字符串）；

元字符：
元字符 	在正则表达式中的写法	     意 义
.	"."			代表任何一个字符
\d	"\\d"			代表0~9的任何一个数字
\D	"\\D"			代表任何一个非数字字符
\s	"\\s"			代表空格类字符，‘\t’, ‘\n’, '\x0B', '\f', '\r'
\S	"\\S"	

代表非空各类字符
\w	"\\w"	代表可用于标识符的字符（不含￥）
\W	"\\W"	代表不能用于标识符的字符




split("\\s+")：
\\s表示   空格,回车,换行等空白符,   
 +号表示一个或多个的意思

----------------------
2，捕获分组

"(exp)"    匹配exp,并捕获文本到自动命名的组里

"(?<name>exp)"   匹配exp,并捕获文本到名称为name的组里

"(?:exp)"  匹配exp,不捕获匹配的文本，也不给此分组分配组号

以下为零宽断言

"(?=exp)"  匹配exp前面的位置

　　如 "How are you doing" 正则"(?<txt>.+(?=ing))" 这里取ing前所有的字符，并定义了一个捕获分组名字为 "txt" 而"txt"这个组里的值为"How are you do";

"(?<=exp)"  匹配exp后面的位置

　　如 "How are you doing" 正则"(?<txt>(?<=How).+)" 这里取"How"之后所有的字符，并定义了一个捕获分组名字为 "txt" 而"txt"这个组里的值为" are you doing";

"(?!exp)"  匹配后面跟的不是exp的位置

　　如 "123abc" 正则 "\d{3}(?!\d)"匹配3位数字后非数字的结果

"(?<!exp)"  匹配前面不是exp的位置

　　如 "abc123 " 正则 "(?<![0-9])123" 匹配"123"前面是非数字的结果也可写成"(?!<\d)123"